{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n/** Grid column component */\n\n\nvar Gx = function Gx(_ref, _ref2) {\n  var gx = _ref2.gx;\n\n  var col = _ref.col,\n      breakpoint = _ref.breakpoint,\n      props = _objectWithoutProperties(_ref, ['col', 'breakpoint']);\n\n  gx = gx || {};\n  var bp = breakpoint || gx.breakpoint || 512;\n  var style = {\n    boxSizing: 'border-box',\n    display: 'inline-block',\n    verticalAlign: 'top',\n    minWidth: col / 12 * 100 + '%',\n    maxWidth: '100%',\n    width: 'calc(' + bp * bp + 'px - ' + 100 * bp + '%)'\n  };\n  return _react2.default.createElement('div', _extends({}, props, {\n    className: 'Gx',\n    style: style\n  }));\n};\n\nGx.propTypes = {\n  /** Width of column above the breakpoint. Based on a 12 column grid. All numbers in a row should add up to 12 or less. */\n  col: _propTypes2.default.oneOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n\n  /** Width in pixels at which columns render side-by-side */\n  breakpoint: _propTypes2.default.number\n};\nGx.defaultProps = {\n  col: 6\n};\nGx.contextTypes = {\n  gx: _propTypes2.default.object\n};\nexports.default = Gx;","map":null,"metadata":{},"sourceType":"script"}